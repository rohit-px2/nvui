name: build-and-test
on: push
jobs:
  linux:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        include:
          - buildtype: 'Debug'
            cc: clang-12
            cxx: clang++-12
            test: true
            upload: false
          - buildtype: 'Release'
            cc: clang-12
            cxx: clang++-12
            test: false
            upload: true
    timeout-minutes: 500
    env:
      CC: ${{ matrix.cc }}
      CXX: ${{ matrix.cxx }}
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: 'recursive'
      - name: Update
        run: sudo apt update
      - name: Install Snap (to install Neovim nightly)
        if: matrix.test
        run: sudo apt install snapd
      - name: Install Neovim Nightly
        if: matrix.test
        run: sudo snap install --edge nvim --classic
      - name: Add Neovim to PATH
        if: matrix.test
        run: echo "/snap/bin" >> $GITHUB_PATH
        shell: bash
      - name: Install dependencies from system package manager
        run: >
          sudo apt-get install libmsgpack-dev libfmt-dev libboost-all-dev
          mesa-common-dev libglu1-mesa-dev
      - name: Install Catch2
        run: |
          git clone https://github.com/catchorg/Catch2.git
          cd Catch2
          git checkout v2.x
          cmake -B build -H. -DBUILD_TESTING=OFF
          cd build
          sudo make install
      - name: Install msgpack
        run: |
          git clone https://github.com/msgpack/msgpack-c msgpack
          cd msgpack
          git checkout cpp_master
          cmake .
          sudo make install
      - name: Install Qt and set Qt5_DIR
        run: |
          python3 -m pip install aqtinstall
          python3 -m aqt install -O ./Qt 5.15.2 linux desktop -m qtsvg
          echo "Qt5_DIR=$(cd Qt/5.15.2/gcc_64/lib/cmake/Qt5; pwd)" >> $GITHUB_ENV
      - name: Build nvui and nvui_test
        run: |
          cmake -B build . -DCMAKE_BUILD_TYPE=${{ matrix.buildtype }}
          cmake --build build --config ${{ matrix.buildtype }}
      - name: Run tests
        if: matrix.test
        run: ./build/nvui_test
      - name: Package
        if: matrix.upload
        run: |
          chmod +x ./scripts/linux/package.sh
          ./scripts/linux/package.sh
      - name: Upload artifact
        uses: actions/upload-artifact@v2
        if: matrix.upload
        with:
          name: nvui-linux-x64
          if-no-files-found: ignore
          path: build/packaged
      - name: Prepare release zip
        if: matrix.upload && startsWith(github.ref, 'refs/tags/')
        run: |
          cd build/packaged
          zip -r nvui-linux-x64.zip assets bin vim
          mv nvui-linux-x64.zip ../..
      - name: Upload release asset
        if: matrix.upload && startsWith(github.ref, 'refs/tags/')
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: nvui-linux-x64.zip
          tag: ${{ github.ref }}
          overwrite: false
          body: "Automated release by Github Actions."
  windows-debug:
    runs-on: windows-latest
    strategy:
      fail-fast: false
    timeout-minutes: 500
    env:
      buildDir: '${{ github.workspace }}/build'
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: 'recursive'
      - uses: ilammy/msvc-dev-cmd@v1
        with:
          sdk: 10.0.19041.0
      - name: Install Neovim Nightly (needed for tests)
        run: choco install -y neovim --pre
      - name: Add Neovim to PATH
        run: echo "C:\tools\neovim\Neovim\bin" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
      - name: Restore deps from cache if they exist
        uses: actions/cache@v2
        with:
          path: |
            build/vcpkg_installed
          key: ${{ runner.os }}-${{ hashFiles('vcpkg.json') }}
          restore-keys: |
            ${{ runner.os }}-build-debug-${{ hashFiles('vcpkg.json') }}
      - name: Build nvui and nvui_test
        run: .\scripts\windows\build-debug.ps1
      - name: Run tests
        run: |
          cd build
          .\nvui_test
        shell: cmd
  windows-release:
    runs-on: windows-latest
    strategy:
      fail-fast: false
    timeout-minutes: 500
    env:
      buildDir: '${{ github.workspace }}/build'
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: 'recursive'
      - uses: ilammy/msvc-dev-cmd@v1
        with:
          sdk: 10.0.19041.0
      - name: Restore deps from cache if they exist
        uses: actions/cache@v2
        with:
          path: |
            build/vcpkg_installed
          key: ${{ runner.os }}-${{ hashFiles('vcpkg.json') }}
          restore-keys: |
            ${{ runner.os }}-build-release-${{ hashFiles('vcpkg.json') }}
      - name: Package into a zip
        run: .\scripts\windows\package.ps1
      - name: Upload artifact
        uses: actions/upload-artifact@v2
        with:
          name: nvui-win64
          if-no-files-found: ignore
          path: build/nvui
      - name: Rename nvui.zip to nvui-win64.zip for release upload
        if: startsWith(github.ref, 'refs/tags/')
        run: ren nvui.zip nvui-win64.zip
      - name: Upload Release asset
        if: startsWith(github.ref, 'refs/tags/')
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: nvui-win64.zip
          tag: ${{ github.ref }}
          overwrite: false
          body: "Automated release by Github Actions."

